// lib/util.js by qxxst
export function lowestCombatLevel(ns) {
    let str = ns.getPlayer().skills.strength;
    let def = ns.getPlayer().skills.defense;
    let dex = ns.getPlayer().skills.dexterity;
    let agi = ns.getPlayer().skills.agility;
    return Math.min(str, def, dex, agi);
}
export function sourceFileOwned(ns, sourceFile, level) {
    return ns.getResetInfo().ownedSF.has(sourceFile) && ns.getResetInfo().ownedSF.get(sourceFile) >= level;
}
export function currentBitnode(ns) {
    return ns.getResetInfo().currentNode;
}
export function grossIncomePerSecond(ns) {
    let allSources = ns.getMoneySources().sinceInstall;
    let income1 = allSources.crime + allSources.hacking + allSources.hacknet + allSources.work;
    ns.sleep(1000);
    let income2 = allSources.crime + allSources.hacking + allSources.hacknet + allSources.work;
    return income2 - income1;
}
export function getPorts(ns) {
    let ports = 0;
    if (ns.fileExists("BruteSSH.exe", "home")) {
        ports = ports + 1;
    }
    if (ns.fileExists("FTPCrack.exe", "home")) {
        ports = ports + 1;
    }
    if (ns.fileExists("relaySMTP.exe", "home")) {
        ports = ports + 1;
    }
    if (ns.fileExists("HTTPWorm.exe", "home")) {
        ports = ports + 1;
    }
    if (ns.fileExists("SQLInject.exe", "home")) {
        ports = ports + 1;
    }
    return ports;
}
export function inferredDaedalusRoute(ns) {
    let hackingLevel = ns.getHackingLevel();
    let inferredRoute = null;
    if (lowestCombatLevel(ns) > hackingLevel) {
        inferredRoute = "combat";
    }
    else if (hackingLevel > lowestCombatLevel(ns)) {
        inferredRoute = "hacking";
    }
    else if (hackingLevel == lowestCombatLevel(ns) || hackingLevel == 0 && lowestCombatLevel(ns) == 0) {
        inferredRoute = null;
    }
    return inferredRoute;
}
export function nextMilestone(ns) {
    let hackingLevel = ns.getHackingLevel();
    let hackingMilestoneLevels = [ns.getServer("CSEC").requiredHackingSkill, ns.getServer("avmnite-02h").requiredHackingSkill, ns.getServer("I.I.I.I").requiredHackingSkill, ns.getServer("run4theh111z").requiredHackingSkill, 2500, ns.getServer("w0r1d_d43mon").requiredHackingSkill];
    let combatMilestoneLevels = [30, 75, 200, 300, 850, 1200, 1500];
    let highestMilestone;
    let nextMilestone;
    if (inferredDaedalusRoute(ns) == "hacking" || inferredDaedalusRoute(ns) == null) {
        highestMilestone = Math.max(...hackingMilestoneLevels);
        nextMilestone = hackingMilestoneLevels.find(level => level > hackingLevel);
        if (hackingLevel < highestMilestone) {
            return nextMilestone;
        }
        else {
            return "None :)";
        }
    }
    else {
        highestMilestone = Math.max(...combatMilestoneLevels);
        nextMilestone = combatMilestoneLevels.find(level => level > lowestCombatLevel(ns));
        if (lowestCombatLevel(ns) < highestMilestone) {
            return nextMilestone;
        }
        else {
            return "None :)";
        }
    }
}
export function factionAugsRemaining(ns, faction) {
    let augsRemaining = 0;
    for (let i = 0; i < ns.singularity.getAugmentationsFromFaction(faction).length; i++) {
        if (!ns.singularity.getOwnedAugmentations().includes(ns.singularity.getAugmentationsFromFaction(faction)[i])) {
            augsRemaining = augsRemaining + 1;
        }
    }
    return augsRemaining;
}
export function donationsUnlocked(ns, faction) {
    let favorRequirement = 150;
    if (currentBitnode(ns) == 3) {
        favorRequirement = 75;
    }
    return ns.singularity.getFactionFavor(faction) >= favorRequirement;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ob21lL2xpYi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVCQUF1QjtBQUN2QixNQUFNLFVBQVUsaUJBQWlCLENBQUMsRUFBTztJQUNyQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUN6QyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUN4QyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUMxQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUN4QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsRUFBTyxFQUFFLFVBQWtCLEVBQUUsS0FBYTtJQUN0RSxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQztBQUMzRyxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxFQUFPO0lBQ2xDLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLFdBQVcsQ0FBQztBQUN6QyxDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEVBQU87SUFDeEMsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLFlBQVksQ0FBQztJQUNuRCxJQUFJLE9B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